import React from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Play, BookOpen, Brain, Clock, Target, Calendar, Users, Zap } from 'lucide-react';
import { useDeckStore } from '@/store/deckStore';
import { useStudyStore } from '@/store/studyStore';

const DeckList: React.FC = () => {
  const navigate = useNavigate();
  const { getAllDecksWithStats } = useDeckStore();
  const { userProgress } = useStudyStore();

  // ===== ENHANCED: Use dynamic statistics =====
  const decksWithStats = getAllDecksWithStats();

  const handleStudyDeck = (deckId: string) => {
    navigate(`/study/${deckId}`);
  };

  const handleQuiz = (deckId: string) => {
    navigate(`/quiz/${deckId}`);
  };

  if (decksWithStats.length === 0) {
    return (
      <div className="text-center py-12">
        <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-900 mb-2">No Decks Available</h3>
        <p className="text-gray-600">Create your first deck to start learning!</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">Your Decks</h2>
        <div className="text-sm text-gray-500">
          {decksWithStats.length} deck{decksWithStats.length !== 1 ? 's' : ''} available
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {decksWithStats.map((deck, index) => {
          const { stats } = deck;
          
          return (
            <motion.div
              key={deck.id}
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-200"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              whileHover={{ y: -5 }}
            >
              {/* Header */}
              <div className="p-6 pb-4">
                <div className="flex items-start justify-between mb-3">
                  <h3 className="text-lg font-semibold text-gray-900 truncate">
                    {deck.name}
                  </h3>
                  <div className="flex items-center space-x-1 text-sm text-gray-500">
                    <BookOpen className="h-4 w-4" />
                    <span>{stats.totalCards}</span>
                  </div>
                </div>

                {deck.description && (
                  <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                    {deck.description}
                  </p>
                )}

                {/* ===== ENHANCED: Real-time statistics display ===== */}
                <div className="grid grid-cols-2 gap-3 mb-4">
                  {/* Due Cards - This is the key metric that should now work! */}
                  <div className={`flex items-center space-x-2 p-2 rounded-lg ${
                    stats.dueCards > 0 ? 'bg-red-50 border border-red-200' : 'bg-gray-50'
                  }`}>
                    <Clock className={`h-4 w-4 ${
                      stats.dueCards > 0 ? 'text-red-600' : 'text-gray-400'
                    }`} />
                    <div className="flex-1 min-w-0">
                      <p className="text-xs text-gray-600">Due</p>
                      <p className={`text-sm font-semibold ${
                        stats.dueCards > 0 ? 'text-red-600' : 'text-gray-500'
                      }`}>
                        {stats.dueCards}
                      </p>
                    </div>
                  </div>

                  {/* Learned Cards */}
                  <div className={`flex items-center space-x-2 p-2 rounded-lg ${
                    stats.learnedCards > 0 ? 'bg-green-50 border border-green-200' : 'bg-gray-50'
                  }`}>
                    <Target className={`h-4 w-4 ${
                      stats.learnedCards > 0 ? 'text-green-600' : 'text-gray-400'
                    }`} />
                    <div className="flex-1 min-w-0">
                      <p className="text-xs text-gray-600">Learned</p>
                      <p className={`text-sm font-semibold ${
                        stats.learnedCards > 0 ? 'text-green-600' : 'text-gray-500'
                      }`}>
                        {stats.learnedCards}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Progress Bar */}
                {stats.totalCards > 0 && (
                  <div className="mb-4">
                    <div className="flex items-center justify-between text-xs text-gray-600 mb-1">
                      <span>Progress</span>
                      <span>{Math.round((stats.learnedCards / stats.totalCards) * 100)}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <motion.div
                        className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ 
                          width: `${(stats.learnedCards / stats.totalCards) * 100}%` 
                        }}
                        transition={{ duration: 1, delay: index * 0.2 }}
                      />
                    </div>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="px-6 pb-6">
                <div className="grid grid-cols-2 gap-2">
                  <motion.button
                    onClick={() => handleStudyDeck(deck.id)}
                    className="flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm font-medium"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    disabled={stats.totalCards === 0}
                  >
                    <Play className="h-4 w-4" />
                    <span>Study</span>
                  </motion.button>

                  <motion.button
                    onClick={() => handleQuiz(deck.id)}
                    className="flex items-center justify-center space-x-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors text-sm font-medium"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    disabled={stats.totalCards === 0}
                  >
                    <Brain className="h-4 w-4" />
                    <span>Quiz</span>
                  </motion.button>
                </div>
              </div>

              {/* Debug Info (only in development) */}
              {process.env.NODE_ENV === 'development' && (
                <div className="px-6 pb-2 text-xs text-gray-400 border-t bg-gray-50">
                  Debug: New:{stats.newCards} | Review:{stats.reviewCards} | Due:{stats.dueCards} | Learned:{stats.learnedCards}
                </div>
              )}
            </motion.div>
          );
        })}
      </div>
    </div>
  );
};

export default DeckList;
